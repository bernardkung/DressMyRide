
<script>
  
  // Query Functions
  function handleErrors(request) {
    if(!request.ok){
      console.warn(request)
      throw Error(request.status);
    }
    return request
  }
    
  function parseJSON(request) {
    return request.json()
      .then((data)=>{
        return data;
    })
  }
  
  function extractLatLng(data) {
    return data.results[0].locations[0].latLng
  }
  
  
  // Core Functions
  function getRibbonItem(node){
    // Recursive function to determine the highest ribbonItem parent of all children
    let highestNode = node;
    // Exit if parent is subcontainer
    while (highestNode.parentNode.className!="subcontainer"){
      highestNode = getRibbonItem(node.parentNode);
    }
    return highestNode;
  }
  
  
  
  function updateWeatherRibbon(data) {
    // Clear the ribbon
    weatherRibbon.innerHTML='';
    // Create a div for each hour
    for (let i=0;i<24;i++) {
      const hData = data.hourly[i];
      composeHourDiv(hData, i);
    }
  }
  
  function composeHourDiv(hourly, index){
    const condCode = hourly.weather[0].icon
    const condIconURL = `http://openweathermap.org/img/wn/${condCode}@2x.png`
    const condDiv = '<div class="ribbonCond"><img src="'+condIconURL+'"></img></div>'
    
    const temp = parseInt(hourly.temp)
    const tempDiv = '<p class="ribbonTemp">'+temp+'<span class="ribbonTempUnit">F</span></p>';
    
    const hour = normalizeHour(getUTCHour(hourly.dt));
    const ampm = normalizeAMPM(getUTCHour(hourly.dt));
    const hourDiv = '<p class="ribbonHour">'+hour+'</p>';
    const ampmDiv = '<p class="ribbonAmpm">'+ampm+'</p>';
    
    const hDiv = document.createElement("li");
    hDiv.innerHTML = condDiv + tempDiv + hourDiv + ampmDiv
    hDiv.className = "ribbonItem"
    
    // Pre-pack hourly data so on mouseover it gets sent to detail div
    setWeatherAttributes(hDiv, hourly);
    hDiv.id = "ribbon"+index;
    weatherRibbon.appendChild(hDiv);
  }
 
  function composeDetailDiv(dataset){
    
    const detailDiv = document.querySelector('#weatherDetail')
    
    // Set the time
    const timeDiv = detailDiv.querySelector('#detailHour');
    const ampmDiv = detailDiv.querySelector('#detailAmpm');
    timeDiv.innerText = dataset.hour;
    ampmDiv.innerText = dataset.ampm;
    
    // Set the temperature
    const tempDiv = detailDiv.querySelector('#detailTempValue');
    tempDiv.innerText = parseInt(dataset.temp);
    
    // Set the condition icon
    const condIconURL = `http://openweathermap.org/img/wn/${dataset.iconCode}@2x.png`
    const iconDiv = detailDiv.querySelector('#detailIcon');
    iconDiv.src=condIconURL;
    
    const descript = detailDiv.querySelector("#detailCond");
    descript.innerText = dataset.description;
    
    // Set the wind
    const detailWindSpeed = detailDiv.querySelector("#detailWindSpeed");
    detailWindSpeed.innerText = dataset.windSpeed
    const detailWindDir = detailDiv.querySelector("#detailWindDirection");
    detailWindDir.innerText = `${normalizeDirection(dataset.windDir)} (${dataset.windDir})`
    
    // Set the rain/snow
    const precipDiv = detailDiv.querySelector("#detailPrecip");
    if (dataset.precipType!=="none") {
      setClass(precipDiv, "visible");
      const precipChance = detailDiv.querySelector("#detailPrecipChance");
      const precipValue = detailDiv.querySelector("#detailPrecipValue");
      const precipType = detailDiv.querySelector("#detailPrecipType")
      precipChance.innerText = Math.round(dataset.pop*100)+"%"
      precipValue.innerText = dataset.precipVal
      precipType.innerText = dataset.precipType
    } else {
      setClass(precipDiv, "hidden");
    }

  }  
    
  function setWeatherAttributes(div, data){
    div.dataset.temp        = data.temp;
    div.dataset.UTCHour     = getUTCHour(data.dt);
    div.dataset.hour        = normalizeHour(getUTCHour(data.dt));
    div.dataset.ampm        = normalizeAMPM(getUTCHour(data.dt))
    div.dataset.condId      = data.weather[0].id;
    div.dataset.condMain    = data.weather[0].main;
    div.dataset.iconCode    = data.weather[0].icon;
    div.dataset.description = data.weather[0].description;
    div.dataset.windSpeed   = data.wind_speed;
    div.dataset.windDir     = data.wind_deg;
    div.dataset.pop         = data.pop;
    div.dataset.precipType  = data.rain
    ? "rain" 
    : data.snow
      ? "snow"
      : "none"
    div.dataset.precipVal   = div.dataset.precipType === "rain" 
    ? parseFloat(data.rain["1h"])
      : div.dataset.precipType === "snow"
        ? parseFloat(data.snow["1h"])
        : 0  
  }
  
  function setClass(div, state) {
    if (state==="hidden") {
      if(!div.classList.contains("hidden")) {
        div.classList.add("hidden")
      }
    } else if (state==="visible") {  
      if(div.classList.contains("hidden")) {
        div.classList.remove("hidden")
      }
    }
  };
  
  function updateRecommendationItemSlot(dataset){
    // Recommendations are loaded in an earlier script tag
    const currTemp = dataset.temp;
    
    // Build list of item recommendations based on weather
    const recommends = recommendations.filter(
      recommend => recommend.max > currTemp && currTemp >= recommend.min
    )
    
    // Build list of itemSlot divs
    const itemDivs = document.querySelectorAll(".itemSlot");
    
    // Loop through each itemDiv
    itemDivs.forEach(itemDiv => {
      const itemText = itemDiv.querySelector(".itemSlotTitle");
      // Get a list of recommends for each item slot
      const slotRecommend = recommends.filter(
        recommend => recommend.slot === itemDiv.id
      )
      // If recommendation(s) exist for the given slot
      if (slotRecommend.length > 0) {
        // Make the div visible
        setClass(itemDiv, "visible");
        itemText.innerText = slotRecommend[0]['name'];
      } else {
        setClass(itemDiv, "hidden");
        itemText.innerText = "";
      }
    })
  }
  
  
  
  // Formatting Functions    
  function tempKelvinToFahrenheit(k) {
    return ((parseFloat(k)-273.15)*1.8)+32
  }
  function tempKelvinToCelsius(k) {
    return parseFloat(k)-273.15
  }
  
  function convertKelvinTemp(temp, unit){
    if (unit.toLowerCase() === 'f') {
      return ((parseFloat(k)-273.15)*1.8)+32
    } else if (unit.toLowerCase() === 'c') {
      return parseFloat(k)-273.15
    }
  }
  
  function getUTCHour(UTCTime) {
    const UTCmilliseconds = new Date(UTCTime*1000);
    const localeOffset = new Date().getTimezoneOffset()*60*1000;
    const localeTime = UTCmilliseconds-localeOffset;
    const UTChour = new Date(localeTime).getUTCHours();
    return UTChour
  }
  
  function normalizeHour(UTChour){
    // Given UTC hour, return hour in 12-hour clock format
    return parseInt(UTChour)===0 ? 12 : UTChour>12 ? UTChour-12 : UTChour; 
  }
  
  function normalizeAMPM(UTChour){
    // Given UTC hour, return AM or PM
    return UTChour >=12 ? "PM" : "AM"; 
  }
  
  function normalizeDirection(degree){
    let str = ""
    if (degree >= 337.5 || degree < 22.5) {
      str += "S"
    } else if (degree >= 157.5 && degree < 247.5) {
      str += "N"
    }
    
    if (degree >= 22.5 && degree < 157.5) {
      str += "W"
    } else if ( degree >= 202.5 && degree < 337.5) {
      str += "E"
    }
    return str
  }
  
</script>