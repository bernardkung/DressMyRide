<script>

  
  // Controller function
  async function lookupLocation(loc) {
    const endpoint = 'https://open.mapquestapi.com/geocoding/v1/address'
    const appKey = '<%= process.env.MAPQUEST_KEY %>'
    const query = `${endpoint}?key=${appKey}&location=${loc}`
    
    fetch(query, {method:'GET'})
    .then(handleErrors)
    .then(parseJSON)
    .then(extractLatLng)
    .then(getWeather)
    .catch(console.warn)
  }
  
  // Gets Weather
  async function getWeather(latLng) {
    const endpoint = 'https://api.openweathermap.org/data/2.5/onecall'
    const appKey = '<%= process.env.OPENWEATHERMAP_KEY %>'
    const units = 'imperial'
    const query = `${endpoint}?appid=${appKey}&lat=${latLng['lat']}&lon=${latLng['lng']}&units=${units}&exclude=minutely`
    fetch(query, {method:'GET'})
      .then(handleErrors)
      .then(parseJSON)
      .then(updatePage)
      .catch(console.warn)
  }
  
  function updatePage(data) {
    updateDiv(data);
    updateWeatherRibbon(data);
  }

  
  function updateDiv(data) {
    const div = document.querySelector("#locationLatLng")
    div.innerText = data
  }
  
  function handleErrors(request) {
    if(!request.ok){
      console.warn(request)
      throw Error(request.status);
    }
    return request
  }
    
  function parseJSON(request) {
    return request.json()
      .then((data)=>{
        return data;
    })
  }
  
  function extractLatLng(data) {
    return data.results[0].locations[0].latLng
  }
  
  
  function updateWeatherRibbon(data) {
    // Clear the ribbon
    weatherRibbon.innerHTML='';
    // Create a div for each hour
    for (let i=0;i<24;i++) {
      const hData = data.hourly[i];
      composeHourDiv(hData, i);
    }
  }
  
  function composeHourDiv(hourly, index){
    const condCode = hourly.weather[0].icon
    const condIconURL = `http://openweathermap.org/img/wn/${condCode}@2x.png`
    const condDiv = '<div class="ribbonCond"><img src="'+condIconURL+'"></img></div>'
    
    const temp = parseInt(hourly.temp)
    const tempDiv = '<p class="ribbonTemp">'+temp+'<span class="ribbonTempUnit">F</span></p>';
    
    const hour = normalizeHour(getUTCHour(hourly.dt));
    const ampm = normalizeAMPM(getUTCHour(hourly.dt));
    const hourDiv = '<p class="ribbonHour">'+hour+'</p>';
    const ampmDiv = '<p class="ribbonAmpm">'+ampm+'</p>';
    
    const hDiv = document.createElement("li");
    hDiv.innerHTML = condDiv + tempDiv + hourDiv + ampmDiv
    hDiv.className = "ribbonItem"
    
    // Pre-pack hourly data so on mouseover it gets sent to detail div
    setWeatherAttributes(hDiv, hourly);
    hDiv.id = "ribbon"+index;
    weatherRibbon.appendChild(hDiv);
  }
 
  function composeDetailDiv(dataset){
    const detailDiv = document.querySelector('#weatherDetail')
    // Set the hour
    const hour = normalizeHour(dataset.UTCHour);
    const ampm = normalizeAMPM(dataset.UTCHour);
    // const timeDiv = document.getElementById('detailHour');
    const timeDiv = detailDiv.querySelector('#detailHour');
    timeDiv.innerText = hour;
    const ampmDiv = document.getElementById('detailAmpm');
    ampmDiv.innerText = ampm;
    
    // Set the condition icon
    const condCode = dataset.iconCode
    const condIconURL = `http://openweathermap.org/img/wn/${condCode}@2x.png`
    const iconDiv = detailDiv.querySelector('#detailIcon');
    iconDiv.src=condIconURL;
    
    // Set the temperature
    const tempDiv = detailDiv.querySelector('#detailTempValue');
    const temp = parseInt(dataset.temp)
    tempDiv.innerText = temp;
    
  }  
    
  function setWeatherAttributes(div, data){
    div.dataset.temp      = data.temp;
    div.dataset.UTCHour   = getUTCHour(data.dt);
    div.dataset.condId    = data.weather[0].id;
    div.dataset.condMain  = data.weather[0].main;
    div.dataset.iconCode  = data.weather[0].icon;
    div.dataset.windSpeed = data.wind_speed;
    div.dataset.windDir   = data.wind_deg;
    div.dataset.pop       = data.pop;
    if (data.rain) {div.dataset.rain = data.rain["1h"]}
    if (data.snow) {div.dataset.snow = data.snow["1h"]}
  }
  
  function setClass(div, state) {
    if (state==="hidden") {
      if(!div.classList.contains("hidden")) {
        div.classList.add("hidden")
      }
    } else if (state==="visible") {  
      if(div.classList.contains("hidden")) {
        div.classList.remove("hidden")
      }
    }
  };
  
  function updateRecommendationItemSlot(dataset){
    // Recommendations are loaded in an earlier script tag
    const currTemp = dataset.temp;
    
    // Build list of item recommendations based on weather
    const recommends = recommendations.filter(
      recommend => recommend.max > currTemp && currTemp >= recommend.min
    )
    
    // Build list of itemSlot divs
    const itemDivs = document.querySelectorAll(".itemSlot");
    
    // Loop through each itemDiv
    itemDivs.forEach(itemDiv => {
      const itemText = itemDiv.querySelector(".itemSlotTitle");
      // Get a list of recommends for each item slot
      const slotRecommend = recommends.filter(
        recommend => recommend.slot === itemDiv.id
      )
      // If recommendation(s) exist for the given slot
      if (slotRecommend.length > 0) {
        // Make the div visible
        setClass(itemDiv, "visible");
        itemText.innerText = slotRecommend[0]['name'];
      } else {
        setClass(itemDiv, "hidden");
        itemText.innerText = "";
      }
      
    })
    
  }
  
  
  </script>
  